import{i as M}from"./2a1c84ff.js";import{f as N}from"./96d78551.js";import{h as F,S as te}from"./a1adfa4c.js";import{p as oe}from"./3997e41f.js";function ne(e){const t=document.getElementsByClassName("description__logos")[e-1];function o({technology:l,path:p}){t.innerHTML+=`<div class="tooltip"> <img src=${p} alt=${l} /> <span class="tooltiptext"> ${l} </span> </div>`}const r=oe[e-1];let n=Array.from(document.querySelectorAll(".project-details"))[e-1];const i=n.querySelector(".description__title"),c=n.querySelector(".image-container__image"),m=n.querySelector(".iframe-global"),a=n.querySelector(".description__text-container").querySelector("p"),w=n.querySelector(".cta__btn"),u=n.querySelector(".play");i.innerHTML=r.title,c.src=r.image,a.innerHTML=r.description,r.technologiesUsed.forEach(l=>{o(l)}),m.src=r.liveView,w.href=r.sourceCode,u.href=r.liveView}const x=e=>e===void 0||e==="auto"||e==="instant"||e==="smooth";function re(e,t){this.scrollLeft=e,this.scrollTop=t}const K=(e,t,o="cannot convert to dictionary.")=>`Failed to execute '${e}' on '${t}': ${o}`,G=(e,t,o)=>K(e,t,`The provided value '${o}' is not a valid enum value of type ScrollBehavior.`),W=(e,t,o)=>{var r;const n=`__SEAMLESS.BACKUP$${t}`;return!e[n]&&e[t]&&!(!((r=e[t])===null||r===void 0)&&r.__isPolyfill)&&(e[n]=e[t]),e[n]||o},ie=e=>{const t=typeof e;return e!==null&&(t==="object"||t==="function")},P=e=>e.ownerDocument.scrollingElement||e.ownerDocument.documentElement;function se(e){if(typeof Event=="function")return new Event("scrollend",{bubbles:e,cancelable:!1});const t=document.createEvent("Event");return t.initEvent("scrollend",e,!1),t}const ce=e=>.5*(1-Math.cos(Math.PI*e));function R(){var e;let t;return!((e=window.performance)===null||e===void 0)&&e.now?t=()=>window.performance.now():t=()=>window.Date.now(),R=t,t()}const le=500,J=e=>{const o=(R()-e.timeStamp)/(e.duration||le);if(o>1){e.method(e.targetX,e.targetY),e.callback();return}const r=(e.timingFunc||ce)(o),n=e.startX+(e.targetX-e.startX)*r,i=e.startY+(e.targetY-e.startY)*r;e.method(n,i),e.rafId=window.requestAnimationFrame(()=>{J(e)})},L=e=>isFinite(e)?Number(e):0,ae=e=>{var t;return(t=e.isConnected)!==null&&t!==void 0?t:!e.ownerDocument||!(e.ownerDocument.compareDocumentPosition(e)&1)},ue=(e,t,o)=>{var r,n;if(!ae(e))return;const i=e.scrollLeft,c=e.scrollTop,m=L((r=t.left)!==null&&r!==void 0?r:i),a=L((n=t.top)!==null&&n!==void 0?n:c);if(m===i&&a===c)return;const w=W(HTMLElement.prototype,"scroll",re),u=W(Object.getPrototypeOf(e),"scroll",w).bind(e);if(t.behavior!=="smooth"){u(m,a);return}const l=()=>{window.removeEventListener("wheel",s),window.removeEventListener("touchmove",s)},p=()=>{l();const _=e.nodeType===9;e.dispatchEvent(se(_))},f=Object.assign(Object.assign({},o),{timeStamp:R(),startX:i,startY:c,targetX:m,targetY:a,rafId:0,method:u,callback:p}),s=()=>{window.cancelAnimationFrame(f.rafId),l()};window.addEventListener("wheel",s,{passive:!0,once:!0}),window.addEventListener("touchmove",s,{passive:!0,once:!0}),J(f)},de=e=>e.window===e,me=e=>(t,o,r)=>{const[n,i]=de(t)?[P(t.document.documentElement),"Window"]:[t,"Element"],c=o??{};if(!ie(c))throw new TypeError(K(e,i));if(!x(c.behavior))throw new TypeError(G(e,i,c.behavior));e==="scrollBy"&&(c.left=L(c.left)+n.scrollLeft,c.top=L(c.top)+n.scrollTop),ue(n,c,r)},pe=me("scroll"),fe=pe,Q=e=>{switch(e){case"horizontal-tb":case"lr":case"lr-tb":case"rl":case"rl-tb":return 0;case"vertical-rl":case"tb":case"tb-rl":return 1;case"vertical-lr":case"tb-lr":return 2;case"sideways-rl":return 3;case"sideways-lr":return 4}return 0},Z=(e,t,o,r)=>{let n=0;switch(t||(n^=2),e){case 0:n=n>>1|(n&1)<<1,[o,r]=[r,o];break;case 1:case 3:n^=1;break;case 4:n^=2;break}return[n,o,r]},ge=e=>(Z(Q(e.writingMode),e.direction!=="rtl",void 0,void 0)[0]&1)===1,we=(e,t,o)=>{const[r,n,i]=Z(t,o,e.block||"start",e.inline||"nearest");return[n,i].map((c,m)=>{switch(c){case"center":return 1;case"nearest":return 0;default:{const a=r>>m&1;return c==="start"==!a?2:3}}})},X=(e,t,o,r,n,i,c)=>e!==0?e:n<t&&i>o||n>t&&i<o?null:n<=t&&c<=r||i>=o&&c>=r?2:i>o&&c<r||n<t&&c>r?3:null,Y=e=>e!=="visible"&&e!=="clip",he=e=>{var t;try{return((t=e.ownerDocument.defaultView)===null||t===void 0?void 0:t.frameElement)||null}catch{return null}},ve=(e,t)=>e.clientHeight<e.scrollHeight||e.clientWidth<e.scrollWidth?Y(t.overflowY)||Y(t.overflowX)||e===P(e):!1,O=e=>{const t=e.parentNode,o=e.parentElement;if(o===null&&t!==null){if(t.nodeType===11)return t.host;if(t.nodeType===9)return he(e)}return o},A=(e,t,o)=>e<t?t:e>o?o:e,ye=e=>["scroll-margin","scroll-snap-margin"].filter(t=>t in e.documentElement.style)[0],_e=(e,t,o)=>{const{top:r,right:n,bottom:i,left:c}=t,m=ye(e.ownerDocument);if(!m)return[r,n,i,c];const a=w=>{const u=o.getPropertyValue(`${m}-${w}`);return parseInt(u,10)||0};return[r-a("top"),n+a("right"),i+a("bottom"),c-a("left")]},b=(e,t,o)=>{switch(e){case 1:return(t+o)/2;case 3:return o;case 2:case 0:return t}},be=(e,t)=>{var o,r,n;const i=(o=e.ownerDocument.defaultView)===null||o===void 0?void 0:o.visualViewport,[c,m,a,w]=e===P(e)?[0,0,(r=i==null?void 0:i.width)!==null&&r!==void 0?r:e.clientWidth,(n=i==null?void 0:i.height)!==null&&n!==void 0?n:e.clientHeight]:[t.left,t.top,e.clientWidth,e.clientHeight],u=c+e.clientLeft,l=m+e.clientTop,p=u+a,f=l+w;return[l,p,f,u]},Ee=(e,t)=>{const o=[];let r=e.ownerDocument,n=r.defaultView;if(!n)return o;const i=window.getComputedStyle(e),c=i.direction!=="rtl",m=Q(i.writingMode||i.getPropertyValue("-webkit-writing-mode")||i.getPropertyValue("-ms-writing-mode")),[a,w]=we(t,m,c);let[u,l,p,f]=_e(e,e.getBoundingClientRect(),i);for(let s=O(e);s!==null;s=O(s)){if(r!==s.ownerDocument){if(r=s.ownerDocument,n=r.defaultView,!n)break;const{left:H,top:q}=s.getBoundingClientRect();u+=q,l+=H,p+=q,f+=H}const _=n.getComputedStyle(s);if(_.position==="fixed")break;if(!ve(s,_))continue;const z=s.getBoundingClientRect(),[k,S,T,C]=be(s,z),I=X(a,C,S,s.clientWidth,f,l,l-f),j=X(w,k,T,s.clientHeight,u,p,p-u),$=I===null?0:b(I,f,l)-b(I,C,S),ee=j===null?0:b(j,u,p)-b(j,k,T),B=ge(_)?A($,-s.scrollWidth+s.clientWidth-s.scrollLeft,-s.scrollLeft):A($,-s.scrollLeft,s.scrollWidth-s.clientWidth-s.scrollLeft),V=A(ee,-s.scrollTop,s.scrollHeight-s.clientHeight-s.scrollTop);o.push([s,{left:s.scrollLeft+B,top:s.scrollTop+V,behavior:t.behavior}]),u=Math.max(u-V,k),l=Math.min(l-B,S),p=Math.min(p-V,T),f=Math.max(f-B,C)}return o},Le=(e,t,o)=>{const r=t||{};if(!x(r.behavior))throw new TypeError(G("scrollIntoView","Element",r.behavior));Ee(e,r).forEach(([i,c])=>{fe(i,c,o)})},ke=new URL(""+new URL("../images/calculator-project-image.png",import.meta.url).href,self.location).href,Se=new URL(""+new URL("../images/businesswebsitecover.png",import.meta.url).href,self.location).href,Te=new URL(""+new URL("../images/dadjokecover.png",import.meta.url).href,self.location).href,Ce=new URL(""+new URL("../images/leotgcover.png",import.meta.url).href,self.location).href,U=document.getElementsByClassName("loader-container")[0],y=Array.from(document.querySelectorAll(".complex-page")),Ie=document.getElementsByClassName("close-btn")[0],je=document.getElementsByClassName("right__option")[0],E=document.getElementsByClassName("right__prompt")[0],v=document.getElementsByClassName("options")[0],Be=document.getElementsByClassName("options__item"),Ve=document.getElementsByClassName("projects__project--new")[0],Ae=document.getElementsByClassName("right__item-one")[0],De=Array.from(document.getElementsByClassName("description__close")),Me=document.getElementsByClassName("iframe")[0];let Ne=Array.from(Be),h=document.querySelectorAll(".complex-foo__navigation-item"),g=document.getElementsByClassName("project-cover__darken"),D=!1,d=0;const Pe=e=>{e.forEach(t=>{if(t.isIntersecting){for(let o=0;o<h.length;o++)h[o].classList.remove("--active-link");d=y.indexOf(t.target),d===0&&h[0].classList.add("--active-link"),d===2&&h[1].classList.add("--active-link"),d===4&&h[2].classList.add("--active-link"),d===6&&h[3].classList.add("--active-link"),d===8&&h[4].classList.add("--active-link")}})},Re={rootMargin:"0px",threshold:1},Ue=new IntersectionObserver(Pe,Re);y.forEach(e=>{Ue.observe(e)});De.forEach(e=>{e.addEventListener("click",()=>{y[0].scrollIntoView(),d=0})});(function(){F(U,5),window.onpageshow=function(e){e.persisted&&window.location.reload()}})();te(E);for(let e=1;e<=4;e++)ne(e);window.addEventListener("wheel",e=>{e.ctrlKey||D||(D=!0,e.deltaY>0?d+=1:d-=1,d<0&&(d=0),d>y.length-1&&(d=y.length-1),Le(y[d],{behavior:"smooth",block:"start"},{duration:10}),setTimeout(()=>{D=!1},200))});window.addEventListener("load",()=>{F(U,3)});Ae.addEventListener("click",e=>{e.preventDefault(),M("about.html")});Ie.addEventListener("click",()=>{N(v)});je.addEventListener("click",e=>{window.getComputedStyle(v).opacity,e.preventDefault(),v.style.display="grid",setTimeout(()=>{v.style.opacity="1"},100)});E.addEventListener("click",()=>{sessionStorage.getItem("prompt")===void 0||sessionStorage.getItem("prompt")===null?(sessionStorage.setItem("prompt","closed"),N(E,1e3)):E.style.opacity="0"});Me.addEventListener("mouseover",e=>{e.toElement.click()});sessionStorage.getItem("use_loader")==null?(sessionStorage.setItem("use_loader",!0),v.style.opacity=1):U.style.display="none";localStorage.getItem("options_setting")==null?(v.style.display="grid",v.style.opacity=1):v.style.display="none";Ne.forEach(e=>{e.addEventListener("click",()=>{localStorage.setItem("view_option",e.querySelector("h1").childNodes[0].textContent),e.querySelector("h1").childNodes[0].textContent=="Advanced"?setTimeout(()=>{N(v,1e3)},500):(M("index.html"),localStorage.setItem("options_setting","set"))})});h.forEach(e=>{e.addEventListener("click",()=>{let t=Array.from(h).indexOf(e);y[t+t].scrollIntoView(),d=t+t})});Ve.addEventListener("click",()=>{M("new-project.html")});g[0].style.backgroundImage=`url(${ke})`;g[1].style.backgroundImage=`url(${Se})`;g[1].style.backgroundRepeat="no-repeat";g[1].style.backgroundSize="100% 95%";g[2].style.backgroundImage=`url(${Te})`;g[2].style.backgroundRepeat="no-repeat";g[2].style.backgroundSize="100% 95%";g[3].style.backgroundImage=`url(${Ce})`;g[3].style.backgroundRepeat="no-repeat";g[3].style.backgroundSize="100% 95%";
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
